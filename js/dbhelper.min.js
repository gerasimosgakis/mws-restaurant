class DBHelper{static openDatabase(){if(console.log("IN OPEN DATABASE"),"indexedDB"in window)return idb.open("restaurants",2,e=>{switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id")}});console.log("No browser support for IndexedDB")}static addIndexedDb(e,t){DBHelper.openDatabase().then(function(a){let o=a.transaction(e,"readwrite"),r=o.objectStore(e);return Promise.all(t.map(function(e){r.add(e)})).catch(function(e){o.abort(),console.log(e)}).then(function(){console.log("All items added successfully")})})}static addRestaurants(){return fetch("http://localhost:1337/restaurants/").then(e=>{if(200===e.status)e.json().then(e=>{const t=e;this.addIndexedDb("restaurants",t)});else{const t=`Request failed. Returned status of ${e.status}`;console.log(t)}}).catch(e=>{console.log("Fetch Error:",e)})}static updateFavorite(e,t){console.log("changing to: ",t),fetch(`http://localhost:1337/restaurants/${e}/?is_favorite=${t}`,{method:"PUT"}).then(()=>{console.log("favorite changed"),this.openDatabase().then(a=>{const o=a.transaction("restaurants","readwrite").objectStore("restaurants");o.get(e).then(e=>{e.is_favorite=t,o.put(e)})})})}static addReviews(){return console.log("ADD REVIEWS"),fetch("http://localhost:1337/reviews/").then(e=>{if(200===e.status)e.json().then(e=>{const t=e;console.log("rev2",t),this.addIndexedDb("reviews",t)});else{const t=`Request failed. Returned status of ${e.status}`;console.log(t)}}).catch(e=>{console.log("Fetch Error:",e)})}static addReview(e){let t={name:"addReview",data:e};if(!navigator.onLine&&"addReview"===t.name)return console.log("OFFLINEOBJ",t),void DBHelper.waitForNetwork(t);let a={restaurant_id:parseInt(e.restaurant_id),name:e.name,createdAt:new Date,updatedAt:new Date,rating:parseInt(e.rating),comments:e.comments};console.log("Sending review: ",a),fetch("http://localhost:1337/reviews",{method:"POST",body:JSON.stringify(a),headers:new Headers({"Content-Type":"application/json"})}).then(e=>{return-1!==e.headers.get("content-type").indexOf("application/json")?e.json():"API call succeeded"}).then(e=>{console.log("All good")}).catch(e=>{console.log("Error: ",e)})}static waitForNetwork(e){console.log("Offline Obj",e),localStorage.setItem("data",JSON.stringify(e.data)),console.log(`Local Storage: ${e.name} stored`),window.addEventListener("online",t=>{console.log("Browser back online",t);let a=JSON.parse(localStorage.getItem("data"));a&&(console.log(a),"addReview"===e.name&&DBHelper.addReview(e.data),localStorage.removeItem("data"))})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurantSmall(e){return`/img/${e.id}-400_small.webp`}static imageUrlForRestaurantMedium(e){return`/img/${e.id}-800_medium.webp`}static imageUrlForRestaurantLarge(e){return`/img/${e.id}-1600_large.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static fetchReviewsById(e){return fetch(`http://localhost:1337/reviews/?restaurant_id=${e}`).then(e=>e.json()).then(e=>(this.openDatabase().then(t=>{if(!t)return;const a=t.transaction("reviews","readwrite").objectStore("reviews");Array.isArray(e)?e.forEach(function(e){a.put(e)}):a.put(e)}),console.log("revs are: ",e),Promise.resolve(e))).catch(t=>(console.log("Error return reviews",t),DBHelper.openDatabase().then(t=>{if(!t)return;return t.transaction(table).objectStore(table).index(restaurant_id).getAll(e)}).then(e=>Promise.resolve(e))))}}window.DBHelper=DBHelper;